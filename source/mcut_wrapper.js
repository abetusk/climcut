// LICENSE: cc0
//
// To the extent possible under law, the person who associated CC0 with
// this source file has waived all copyright and related or neighboring rights
// to this source file.
//    

var Module = require("../bin/mcut.js");

var cyl0 = {
  "v": [
    0.25,0,0.5,
    0.23096988312782168,-0.09567085809127245,-0.5,
    0.25,0,-0.5,
    0.23096988312782168,-0.09567085809127245,0.5,
    0.1767766952966369,-0.17677669529663687,-0.5,
    0.1767766952966369,-0.17677669529663687,0.5,
    0.09567085809127246,-0.23096988312782168,-0.5,
    0.09567085809127246,-0.23096988312782168,0.5,
    1.5308084989341915e-17,-0.25,-0.5,
    1.5308084989341915e-17,-0.25,0.5,
    -0.09567085809127243,-0.23096988312782168,-0.5,
    -0.09567085809127243,-0.23096988312782168,0.5,
    -0.17677669529663687,-0.1767766952966369,-0.5,
    -0.17677669529663687,-0.1767766952966369,0.5,
    -0.23096988312782168,-0.09567085809127247,-0.5,
    -0.23096988312782168,-0.09567085809127247,0.5,
    -0.25,-3.061616997868383e-17,-0.5,
    -0.25,-3.061616997868383e-17,0.5,
    -0.2309698831278217,0.09567085809127242,-0.5,
    -0.2309698831278217,0.09567085809127242,0.5,
    -0.17677669529663692,0.17677669529663687,-0.5,
    -0.17677669529663692,0.17677669529663687,0.5,
    -0.09567085809127258,0.23096988312782163,-0.5,
    -0.09567085809127258,0.23096988312782163,0.5,
    -4.592425496802574e-17,0.25,-0.5,
    -4.592425496802574e-17,0.25,0.5,
    0.0956708580912725,0.23096988312782166,-0.5,
    0.0956708580912725,0.23096988312782166,0.5,
    0.17677669529663684,0.17677669529663692,-0.5,
    0.17677669529663684,0.17677669529663692,0.5,
    0.23096988312782163,0.0956708580912726,-0.5,
    0.23096988312782163,0.0956708580912726,0.5,
    0,0,-0.5,
    0,0,0.5, ],

  "f": [
    0,1,2,    0,3,1,    3,4,1,    3,5,4,    5,6,4,    5,7,6,    7,8,6,    7,9,8,
    9,10,8,   9,11,10,  11,12,10, 11,13,12, 13,14,12, 13,15,14, 15,16,14, 15,17,16,
    17,18,16, 17,19,18, 19,20,18, 19,21,20, 21,22,20, 21,23,22, 23,24,22, 23,25,24,
    25,26,24, 25,27,26, 27,28,26, 27,29,28, 29,30,28, 29,31,30, 31,2,30,  31,0,2,
    32,2,1,   32,1,4,   32,4,6,   32,6,8,   32,8,10,  32,10,12, 32,12,14, 32,14,16,
    32,16,18, 32,18,20, 32,20,22, 32,22,24, 32,24,26, 32,26,28, 32,28,30, 32,30,2,
    3,0,33,   5,3,33,   7,5,33,   9,7,33,   11,9,33,  13,11,33, 15,13,33, 17,15,33,
    19,17,33, 21,19,33, 23,21,33, 25,23,33, 27,25,33, 29,27,33, 31,29,33, 0,31,33 ]

};

var cyl1 = {
  "v": [
    0.25,-0.49999999999999983,1.3397448292514316e-8,
    0.23096988312782168,0.4999999974365091,-0.09567087148872071,
    0.25,0.49999999999999983,-1.3397448292514316e-8,
    0.23096988312782168,-0.5000000025634905,-0.09567084469382413,
    0.1767766952966369,0.4999999952632866,-0.1767767086940851,
    0.1767766952966369,-0.5000000047367131,-0.17677668189918852,
    0.09567085809127246,0.4999999938111857,-0.2309698965252699,
    0.09567085809127246,-0.500000006188814,-0.2309698697303733,
    1.5308084989341915e-17,0.4999999933012757,-0.2500000133974482,
    1.5308084989341915e-17,-0.500000006698724,-0.24999998660255163,
    -0.09567085809127243,0.4999999938111857,-0.2309698965252699,
    -0.09567085809127243,-0.500000006188814,-0.2309698697303733,
    -0.17677669529663687,0.4999999952632866,-0.17677670869408513,
    -0.17677669529663687,-0.5000000047367131,-0.17677668189918855,
    -0.23096988312782168,0.4999999974365091,-0.09567087148872074,
    -0.23096988312782168,-0.5000000025634905,-0.09567084469382416,
    -0.25,0.49999999999999983,-1.3397448323130486e-8,
    -0.25,-0.49999999999999983,1.3397448261898147e-8,
    -0.2309698831278217,0.5000000025634905,0.0956708446938241,
    -0.2309698831278217,-0.4999999974365091,0.09567087148872068,
    -0.17677669529663692,0.5000000047367131,0.17677668189918852,
    -0.17677669529663692,-0.4999999952632866,0.1767767086940851,
    -0.09567085809127258,0.500000006188814,0.23096986973037326,
    -0.09567085809127258,-0.4999999938111857,0.23096989652526984,
    -4.592425496802574e-17,0.500000006698724,0.24999998660255163,
    -4.592425496802574e-17,-0.4999999933012757,0.2500000133974482,
    0.0956708580912725,0.500000006188814,0.23096986973037328,
    0.0956708580912725,-0.4999999938111857,0.23096989652526986,
    0.17677669529663684,0.5000000047367131,0.17677668189918858,
    0.17677669529663684,-0.4999999952632866,0.17677670869408516,
    0.23096988312782163,0.5000000025634905,0.09567084469382428,
    0.23096988312782163,-0.4999999974365091,0.09567087148872086,
    0,0.49999999999999983,-1.3397448292514316e-8,
    0,-0.49999999999999983,1.3397448292514316e-8,
  ],

  "f": [
    0,1,2,    0,3,1,    3,4,1,    3,5,4,    5,6,4,    5,7,6,    7,8,6,    7,9,8,
    9,10,8,   9,11,10,  11,12,10, 11,13,12, 13,14,12, 13,15,14, 15,16,14, 15,17,16,
    17,18,16, 17,19,18, 19,20,18, 19,21,20, 21,22,20, 21,23,22, 23,24,22, 23,25,24,
    25,26,24, 25,27,26, 27,28,26, 27,29,28, 29,30,28, 29,31,30, 31,2,30,  31,0,2,
    32,2,1,   32,1,4,   32,4,6,   32,6,8,   32,8,10,  32,10,12, 32,12,14, 32,14,16,
    32,16,18, 32,18,20, 32,20,22, 32,22,24, 32,24,26, 32,26,28, 32,28,30, 32,30,2,
    3,0,33,   5,3,33,   7,5,33,   9,7,33,   11,9,33,  13,11,33, 15,13,33, 17,15,33,
    19,17,33, 21,19,33, 23,21,33, 25,23,33, 27,25,33, 29,27,33, 31,29,33, 0,31,33,
  ]

};


function _cpy_d(dst_view, src_a) {
  let dst = mcut.HEAPF64.subarray( dst_view>>3, (dst_view>>3) + src_a.length );
  for (let i=0; i<src_a.length; i++) { dst[i] = src_a[i]; }
}

function _cpy_i(dst_view, src_a) {
  let dst = mcut.HEAPU32.subarray( dst_view>>2, (dst_view>>2) + src_a.length );
  for (let i=0; i<src_a.length; i++) { dst[i] = src_a[i]; }
}


function mcut_bop(tf0, tf1, op) {
  op = ((typeof op === "undefined") ? 2 : op);
  let sz_double = 8;
  let sz_int = 4;

  let v0_ptr = mcut._malloc( tf0.v.length*sz_double );
  let f0_ptr = mcut._malloc( tf0.f.length*sz_int );

  let v1_ptr = mcut._malloc( tf1.v.length*sz_double );
  let f1_ptr = mcut._malloc( tf1.f.length*sz_int );

  let print_tri = false;

  _cpy_d(v0_ptr, tf0.v);
  _cpy_d(v1_ptr, tf1.v);

  _cpy_i(f0_ptr, tf0.f);
  _cpy_i(f1_ptr, tf1.f);

  let ret =
    mcut.ccall("mcutop",
      "number",
      ["number", "number", "number", "number",
       "number", "number", "number", "number",
        "number"],
      [ v0_ptr, tf0.v.length/3, f0_ptr, tf0.f.length/3,
        v1_ptr, tf1.v.length/3, f1_ptr, tf1.f.length/3,
        2 ]);

  let n_comp = mcut.mcut_n();

  let res_vf = { "v":[], "f": [] };

  for (let c=0; c<n_comp; c++) {
    let _v = mcut.mcut_v(c);
    let _f = mcut.mcut_f(c);

    for (let i=0; i<_v.length; i++) { res_vf.v.push( _v[i] ); }
    for (let i=0; i<_f.length; i++) { res_vf.f.push( _f[i] ); }

    if (print_tri) {
      console.log("#", _v.length, _f.length);
      for (let i=0; i<_f.length; i+=3) {
        let v0 = 3*_f[i+0];
        let v1 = 3*_f[i+1];
        let v2 = 3*_f[i+2];
        console.log( _v[v0+0], _v[v0+1], _v[v0+2] );
        console.log( _v[v1+0], _v[v1+1], _v[v1+2] );
        console.log( _v[v2+0], _v[v2+1], _v[v2+2] );
        console.log("\n");
      }
    }


  }

  mcut._free(v0_ptr);
  mcut._free(f0_ptr);
  mcut._free(v1_ptr);
  mcut._free(f1_ptr);

  return res_vf;
}

if (typeof window !== "undefined") {

  // so hacky!
  // So, `Module` is a keyword? Anything other than `Module` doesn't work.
  // We need to export `mcut` specifically here (in window) so that the
  // above function, when referencing `mcut`, will succeed.
  //
  window['mcut'] = Module;

  // boolean op helper function
  //
  window['mcut_bop'] = mcut_bop;

  // example structures so we can immediately use without a ton
  // of supporting code
  //
  window['cyl0'] = cyl0;
  window['cyl1'] = cyl1;
}


/*
module['ENVIRONMENT'] = 'NODE';
module.exports["mcut"] = mcut;
module.exports["ok"] = ok;
module.exports["mcutjs"] = mcutjs;

module.exports["cyl0"] = cyl0;
module.exports["cyl1"] = cyl1;

*/
